#!/usr/bin/env python

import argparse
from requests.exceptions import HTTPError

from figstats import stats, visualization
from matplotlib.backends.backend_pdf import PdfPages


if __name__ in '__main__':
    description = 'Command-line driver for figstats timeline plots.'
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('-a', '--api-token', required=True,
                        help='Figshare API token')
    parser.add_argument('-b', '--basic-token', required=True,
                        help='Figshare base64 API stats token')
    parser.add_argument('-i', '--institute', required=True,
                        help='Name of institution (e.g., "arizona")')
    args = parser.parse_args()

    fs = stats.Figshare(api_token=args.api_token,
                        basic_token=args.basic_token,
                        institution=True,
                        institute=args.institute)

    articles_df = fs.retrieve_institution_articles()
    out_pdf = f"{args.institute}_timeline_plots.pdf"
    pp = PdfPages(out_pdf)

    for article_id in articles_df['id']:
        print(f"Working on : {article_id}")
        try:
            article_dict = fs.retrieve_article_details(article_id)
            try:
                timeline_dict = fs.get_timeline(article_id, item='article',
                                                institution=True)

                fig = visualization.plot_timeline(timeline_dict, article_dict,
                                                  save=False)
                print(type(fig))
                fig.savefig(pp, format='pdf', bbox_inches='tight')
                fig.clear()
            except TypeError:
                print("TypeError")
        except (HTTPError, UnicodeEncodeError):
            print(f"Skipping: {article_id}")
            pass

    print(f"Writing : {out_pdf}")
    pp.close()
